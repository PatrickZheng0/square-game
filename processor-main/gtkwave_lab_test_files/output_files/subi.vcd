$date
	Wed Feb 19 14:02:57 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module Wrapper_tb $end
$var wire 8 ! regA [7:0] $end
$var wire 1 " rwe $end
$var wire 3 # rs1_test [2:0] $end
$var wire 3 $ rs1_in [2:0] $end
$var wire 3 % rs [2:0] $end
$var wire 3 & rd [2:0] $end
$var wire 8 ' rData [7:0] $end
$var wire 15 ( instData [14:0] $end
$var parameter 32 ) DEFAULT_CYCLES $end
$var parameter 232 * DIR $end
$var parameter 32 + FILE $end
$var parameter 80 , MEM_DIR $end
$var parameter 104 - OUT_DIR $end
$var parameter 152 . VERIF_DIR $end
$var reg 1 / clock $end
$var reg 32 0 exp_result [31:0] $end
$var reg 121 1 exp_text [120:0] $end
$var reg 8 2 instAddr [7:0] $end
$var reg 10 3 num_cycles [9:0] $end
$var reg 1 4 reset $end
$var reg 1 5 testMode $end
$var reg 1 6 verify $end
$var integer 32 7 cycles [31:0] $end
$var integer 32 8 errors [31:0] $end
$var integer 32 9 expFile [31:0] $end
$var integer 32 : expScan [31:0] $end
$var integer 32 ; reg_to_test [31:0] $end
$scope module CPU $end
$var wire 8 < address_imem [7:0] $end
$var wire 1 / clock $end
$var wire 1 " ctrl_writeEnable $end
$var wire 8 = data_readReg [7:0] $end
$var wire 8 > data_writeReg [7:0] $end
$var wire 1 4 reset $end
$var wire 8 ? xwo_out [7:0] $end
$var wire 15 @ xwinsn_out [14:0] $end
$var wire 15 A q_imem [14:0] $end
$var wire 8 B immediate [7:0] $end
$var wire 15 C fdinsn_out [14:0] $end
$var wire 15 D dxinsn_out [14:0] $end
$var wire 8 E dxa_out [7:0] $end
$var wire 3 F ctrl_writeReg [2:0] $end
$var wire 3 G ctrl_readReg [2:0] $end
$var wire 8 H alu_out [7:0] $end
$scope module ALU $end
$var wire 1 I ctrl_ALUopcode $end
$var wire 8 J data_operandB [7:0] $end
$var wire 8 K sub_result [7:0] $end
$var wire 8 L data_result [7:0] $end
$var wire 8 M data_operandA [7:0] $end
$var wire 8 N add_result [7:0] $end
$scope module add $end
$var wire 1 O carry_in $end
$var wire 8 P data_operandB [7:0] $end
$var wire 8 Q data_result [7:0] $end
$var wire 8 R data_operandA [7:0] $end
$upscope $end
$scope module sub $end
$var wire 1 S carry_in $end
$var wire 8 T data_operandB [7:0] $end
$var wire 8 U data_result [7:0] $end
$var wire 8 V data_operandA [7:0] $end
$upscope $end
$upscope $end
$scope module DX_A $end
$var wire 1 W clock $end
$var wire 8 X dataWrite [7:0] $end
$var wire 1 4 reset $end
$var wire 1 Y we $end
$var wire 8 Z dataRead [7:0] $end
$var parameter 32 [ WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 \ i $end
$scope module d_flip_flop $end
$var wire 1 W clk $end
$var wire 1 4 clr $end
$var wire 1 ] d $end
$var wire 1 Y en $end
$var reg 1 ^ q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 _ i $end
$scope module d_flip_flop $end
$var wire 1 W clk $end
$var wire 1 4 clr $end
$var wire 1 ` d $end
$var wire 1 Y en $end
$var reg 1 a q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 b i $end
$scope module d_flip_flop $end
$var wire 1 W clk $end
$var wire 1 4 clr $end
$var wire 1 c d $end
$var wire 1 Y en $end
$var reg 1 d q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 e i $end
$scope module d_flip_flop $end
$var wire 1 W clk $end
$var wire 1 4 clr $end
$var wire 1 f d $end
$var wire 1 Y en $end
$var reg 1 g q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 h i $end
$scope module d_flip_flop $end
$var wire 1 W clk $end
$var wire 1 4 clr $end
$var wire 1 i d $end
$var wire 1 Y en $end
$var reg 1 j q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 k i $end
$scope module d_flip_flop $end
$var wire 1 W clk $end
$var wire 1 4 clr $end
$var wire 1 l d $end
$var wire 1 Y en $end
$var reg 1 m q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 n i $end
$scope module d_flip_flop $end
$var wire 1 W clk $end
$var wire 1 4 clr $end
$var wire 1 o d $end
$var wire 1 Y en $end
$var reg 1 p q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 q i $end
$scope module d_flip_flop $end
$var wire 1 W clk $end
$var wire 1 4 clr $end
$var wire 1 r d $end
$var wire 1 Y en $end
$var reg 1 s q $end
$upscope $end
$upscope $end
$upscope $end
$scope module DX_INSN $end
$var wire 1 t clock $end
$var wire 1 4 reset $end
$var wire 1 u we $end
$var wire 15 v dataWrite [14:0] $end
$var wire 15 w dataRead [14:0] $end
$var parameter 32 x WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 y i $end
$scope module d_flip_flop $end
$var wire 1 t clk $end
$var wire 1 4 clr $end
$var wire 1 z d $end
$var wire 1 u en $end
$var reg 1 { q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 | i $end
$scope module d_flip_flop $end
$var wire 1 t clk $end
$var wire 1 4 clr $end
$var wire 1 } d $end
$var wire 1 u en $end
$var reg 1 ~ q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 !" i $end
$scope module d_flip_flop $end
$var wire 1 t clk $end
$var wire 1 4 clr $end
$var wire 1 "" d $end
$var wire 1 u en $end
$var reg 1 #" q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 $" i $end
$scope module d_flip_flop $end
$var wire 1 t clk $end
$var wire 1 4 clr $end
$var wire 1 %" d $end
$var wire 1 u en $end
$var reg 1 &" q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 '" i $end
$scope module d_flip_flop $end
$var wire 1 t clk $end
$var wire 1 4 clr $end
$var wire 1 (" d $end
$var wire 1 u en $end
$var reg 1 )" q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 *" i $end
$scope module d_flip_flop $end
$var wire 1 t clk $end
$var wire 1 4 clr $end
$var wire 1 +" d $end
$var wire 1 u en $end
$var reg 1 ," q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 -" i $end
$scope module d_flip_flop $end
$var wire 1 t clk $end
$var wire 1 4 clr $end
$var wire 1 ." d $end
$var wire 1 u en $end
$var reg 1 /" q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 0" i $end
$scope module d_flip_flop $end
$var wire 1 t clk $end
$var wire 1 4 clr $end
$var wire 1 1" d $end
$var wire 1 u en $end
$var reg 1 2" q $end
$upscope $end
$upscope $end
$scope begin loop1[8] $end
$var parameter 5 3" i $end
$scope module d_flip_flop $end
$var wire 1 t clk $end
$var wire 1 4 clr $end
$var wire 1 4" d $end
$var wire 1 u en $end
$var reg 1 5" q $end
$upscope $end
$upscope $end
$scope begin loop1[9] $end
$var parameter 5 6" i $end
$scope module d_flip_flop $end
$var wire 1 t clk $end
$var wire 1 4 clr $end
$var wire 1 7" d $end
$var wire 1 u en $end
$var reg 1 8" q $end
$upscope $end
$upscope $end
$scope begin loop1[10] $end
$var parameter 5 9" i $end
$scope module d_flip_flop $end
$var wire 1 t clk $end
$var wire 1 4 clr $end
$var wire 1 :" d $end
$var wire 1 u en $end
$var reg 1 ;" q $end
$upscope $end
$upscope $end
$scope begin loop1[11] $end
$var parameter 5 <" i $end
$scope module d_flip_flop $end
$var wire 1 t clk $end
$var wire 1 4 clr $end
$var wire 1 =" d $end
$var wire 1 u en $end
$var reg 1 >" q $end
$upscope $end
$upscope $end
$scope begin loop1[12] $end
$var parameter 5 ?" i $end
$scope module d_flip_flop $end
$var wire 1 t clk $end
$var wire 1 4 clr $end
$var wire 1 @" d $end
$var wire 1 u en $end
$var reg 1 A" q $end
$upscope $end
$upscope $end
$scope begin loop1[13] $end
$var parameter 5 B" i $end
$scope module d_flip_flop $end
$var wire 1 t clk $end
$var wire 1 4 clr $end
$var wire 1 C" d $end
$var wire 1 u en $end
$var reg 1 D" q $end
$upscope $end
$upscope $end
$scope begin loop1[14] $end
$var parameter 5 E" i $end
$scope module d_flip_flop $end
$var wire 1 t clk $end
$var wire 1 4 clr $end
$var wire 1 F" d $end
$var wire 1 u en $end
$var reg 1 G" q $end
$upscope $end
$upscope $end
$upscope $end
$scope module FD_INSN $end
$var wire 1 H" clock $end
$var wire 1 4 reset $end
$var wire 1 I" we $end
$var wire 15 J" dataWrite [14:0] $end
$var wire 15 K" dataRead [14:0] $end
$var parameter 32 L" WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 M" i $end
$scope module d_flip_flop $end
$var wire 1 H" clk $end
$var wire 1 4 clr $end
$var wire 1 N" d $end
$var wire 1 I" en $end
$var reg 1 O" q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 P" i $end
$scope module d_flip_flop $end
$var wire 1 H" clk $end
$var wire 1 4 clr $end
$var wire 1 Q" d $end
$var wire 1 I" en $end
$var reg 1 R" q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 S" i $end
$scope module d_flip_flop $end
$var wire 1 H" clk $end
$var wire 1 4 clr $end
$var wire 1 T" d $end
$var wire 1 I" en $end
$var reg 1 U" q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 V" i $end
$scope module d_flip_flop $end
$var wire 1 H" clk $end
$var wire 1 4 clr $end
$var wire 1 W" d $end
$var wire 1 I" en $end
$var reg 1 X" q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 Y" i $end
$scope module d_flip_flop $end
$var wire 1 H" clk $end
$var wire 1 4 clr $end
$var wire 1 Z" d $end
$var wire 1 I" en $end
$var reg 1 [" q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 \" i $end
$scope module d_flip_flop $end
$var wire 1 H" clk $end
$var wire 1 4 clr $end
$var wire 1 ]" d $end
$var wire 1 I" en $end
$var reg 1 ^" q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 _" i $end
$scope module d_flip_flop $end
$var wire 1 H" clk $end
$var wire 1 4 clr $end
$var wire 1 `" d $end
$var wire 1 I" en $end
$var reg 1 a" q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 b" i $end
$scope module d_flip_flop $end
$var wire 1 H" clk $end
$var wire 1 4 clr $end
$var wire 1 c" d $end
$var wire 1 I" en $end
$var reg 1 d" q $end
$upscope $end
$upscope $end
$scope begin loop1[8] $end
$var parameter 5 e" i $end
$scope module d_flip_flop $end
$var wire 1 H" clk $end
$var wire 1 4 clr $end
$var wire 1 f" d $end
$var wire 1 I" en $end
$var reg 1 g" q $end
$upscope $end
$upscope $end
$scope begin loop1[9] $end
$var parameter 5 h" i $end
$scope module d_flip_flop $end
$var wire 1 H" clk $end
$var wire 1 4 clr $end
$var wire 1 i" d $end
$var wire 1 I" en $end
$var reg 1 j" q $end
$upscope $end
$upscope $end
$scope begin loop1[10] $end
$var parameter 5 k" i $end
$scope module d_flip_flop $end
$var wire 1 H" clk $end
$var wire 1 4 clr $end
$var wire 1 l" d $end
$var wire 1 I" en $end
$var reg 1 m" q $end
$upscope $end
$upscope $end
$scope begin loop1[11] $end
$var parameter 5 n" i $end
$scope module d_flip_flop $end
$var wire 1 H" clk $end
$var wire 1 4 clr $end
$var wire 1 o" d $end
$var wire 1 I" en $end
$var reg 1 p" q $end
$upscope $end
$upscope $end
$scope begin loop1[12] $end
$var parameter 5 q" i $end
$scope module d_flip_flop $end
$var wire 1 H" clk $end
$var wire 1 4 clr $end
$var wire 1 r" d $end
$var wire 1 I" en $end
$var reg 1 s" q $end
$upscope $end
$upscope $end
$scope begin loop1[13] $end
$var parameter 5 t" i $end
$scope module d_flip_flop $end
$var wire 1 H" clk $end
$var wire 1 4 clr $end
$var wire 1 u" d $end
$var wire 1 I" en $end
$var reg 1 v" q $end
$upscope $end
$upscope $end
$scope begin loop1[14] $end
$var parameter 5 w" i $end
$scope module d_flip_flop $end
$var wire 1 H" clk $end
$var wire 1 4 clr $end
$var wire 1 x" d $end
$var wire 1 I" en $end
$var reg 1 y" q $end
$upscope $end
$upscope $end
$upscope $end
$scope module XW_INSN $end
$var wire 1 z" clock $end
$var wire 15 {" dataWrite [14:0] $end
$var wire 1 4 reset $end
$var wire 1 |" we $end
$var wire 15 }" dataRead [14:0] $end
$var parameter 32 ~" WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 !# i $end
$scope module d_flip_flop $end
$var wire 1 z" clk $end
$var wire 1 4 clr $end
$var wire 1 "# d $end
$var wire 1 |" en $end
$var reg 1 ## q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 $# i $end
$scope module d_flip_flop $end
$var wire 1 z" clk $end
$var wire 1 4 clr $end
$var wire 1 %# d $end
$var wire 1 |" en $end
$var reg 1 &# q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 '# i $end
$scope module d_flip_flop $end
$var wire 1 z" clk $end
$var wire 1 4 clr $end
$var wire 1 (# d $end
$var wire 1 |" en $end
$var reg 1 )# q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 *# i $end
$scope module d_flip_flop $end
$var wire 1 z" clk $end
$var wire 1 4 clr $end
$var wire 1 +# d $end
$var wire 1 |" en $end
$var reg 1 ,# q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 -# i $end
$scope module d_flip_flop $end
$var wire 1 z" clk $end
$var wire 1 4 clr $end
$var wire 1 .# d $end
$var wire 1 |" en $end
$var reg 1 /# q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 0# i $end
$scope module d_flip_flop $end
$var wire 1 z" clk $end
$var wire 1 4 clr $end
$var wire 1 1# d $end
$var wire 1 |" en $end
$var reg 1 2# q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 3# i $end
$scope module d_flip_flop $end
$var wire 1 z" clk $end
$var wire 1 4 clr $end
$var wire 1 4# d $end
$var wire 1 |" en $end
$var reg 1 5# q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 6# i $end
$scope module d_flip_flop $end
$var wire 1 z" clk $end
$var wire 1 4 clr $end
$var wire 1 7# d $end
$var wire 1 |" en $end
$var reg 1 8# q $end
$upscope $end
$upscope $end
$scope begin loop1[8] $end
$var parameter 5 9# i $end
$scope module d_flip_flop $end
$var wire 1 z" clk $end
$var wire 1 4 clr $end
$var wire 1 :# d $end
$var wire 1 |" en $end
$var reg 1 ;# q $end
$upscope $end
$upscope $end
$scope begin loop1[9] $end
$var parameter 5 <# i $end
$scope module d_flip_flop $end
$var wire 1 z" clk $end
$var wire 1 4 clr $end
$var wire 1 =# d $end
$var wire 1 |" en $end
$var reg 1 ># q $end
$upscope $end
$upscope $end
$scope begin loop1[10] $end
$var parameter 5 ?# i $end
$scope module d_flip_flop $end
$var wire 1 z" clk $end
$var wire 1 4 clr $end
$var wire 1 @# d $end
$var wire 1 |" en $end
$var reg 1 A# q $end
$upscope $end
$upscope $end
$scope begin loop1[11] $end
$var parameter 5 B# i $end
$scope module d_flip_flop $end
$var wire 1 z" clk $end
$var wire 1 4 clr $end
$var wire 1 C# d $end
$var wire 1 |" en $end
$var reg 1 D# q $end
$upscope $end
$upscope $end
$scope begin loop1[12] $end
$var parameter 5 E# i $end
$scope module d_flip_flop $end
$var wire 1 z" clk $end
$var wire 1 4 clr $end
$var wire 1 F# d $end
$var wire 1 |" en $end
$var reg 1 G# q $end
$upscope $end
$upscope $end
$scope begin loop1[13] $end
$var parameter 5 H# i $end
$scope module d_flip_flop $end
$var wire 1 z" clk $end
$var wire 1 4 clr $end
$var wire 1 I# d $end
$var wire 1 |" en $end
$var reg 1 J# q $end
$upscope $end
$upscope $end
$scope begin loop1[14] $end
$var parameter 5 K# i $end
$scope module d_flip_flop $end
$var wire 1 z" clk $end
$var wire 1 4 clr $end
$var wire 1 L# d $end
$var wire 1 |" en $end
$var reg 1 M# q $end
$upscope $end
$upscope $end
$upscope $end
$scope module XW_O $end
$var wire 1 N# clock $end
$var wire 8 O# dataWrite [7:0] $end
$var wire 1 4 reset $end
$var wire 1 P# we $end
$var wire 8 Q# dataRead [7:0] $end
$var parameter 32 R# WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 S# i $end
$scope module d_flip_flop $end
$var wire 1 N# clk $end
$var wire 1 4 clr $end
$var wire 1 T# d $end
$var wire 1 P# en $end
$var reg 1 U# q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 V# i $end
$scope module d_flip_flop $end
$var wire 1 N# clk $end
$var wire 1 4 clr $end
$var wire 1 W# d $end
$var wire 1 P# en $end
$var reg 1 X# q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 Y# i $end
$scope module d_flip_flop $end
$var wire 1 N# clk $end
$var wire 1 4 clr $end
$var wire 1 Z# d $end
$var wire 1 P# en $end
$var reg 1 [# q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 \# i $end
$scope module d_flip_flop $end
$var wire 1 N# clk $end
$var wire 1 4 clr $end
$var wire 1 ]# d $end
$var wire 1 P# en $end
$var reg 1 ^# q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 _# i $end
$scope module d_flip_flop $end
$var wire 1 N# clk $end
$var wire 1 4 clr $end
$var wire 1 `# d $end
$var wire 1 P# en $end
$var reg 1 a# q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 b# i $end
$scope module d_flip_flop $end
$var wire 1 N# clk $end
$var wire 1 4 clr $end
$var wire 1 c# d $end
$var wire 1 P# en $end
$var reg 1 d# q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 e# i $end
$scope module d_flip_flop $end
$var wire 1 N# clk $end
$var wire 1 4 clr $end
$var wire 1 f# d $end
$var wire 1 P# en $end
$var reg 1 g# q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 h# i $end
$scope module d_flip_flop $end
$var wire 1 N# clk $end
$var wire 1 4 clr $end
$var wire 1 i# d $end
$var wire 1 P# en $end
$var reg 1 j# q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module InstMem $end
$var wire 8 k# addr [7:0] $end
$var wire 1 / clk $end
$var parameter 32 l# ADDRESS_WIDTH $end
$var parameter 32 m# DATA_WIDTH $end
$var parameter 32 n# DEPTH $end
$var parameter 376 o# MEMFILE $end
$var reg 15 p# dataOut [14:0] $end
$upscope $end
$scope module RegisterFile $end
$var wire 1 / clock $end
$var wire 3 q# ctrl_readReg [2:0] $end
$var wire 1 4 ctrl_reset $end
$var wire 1 " ctrl_writeEnable $end
$var wire 3 r# ctrl_writeReg [2:0] $end
$var wire 8 s# data_readReg [7:0] $end
$var wire 8 t# data_writeReg [7:0] $end
$var wire 8 u# decoded_writeReg [7:0] $end
$var wire 8 v# decoded_readReg [7:0] $end
$var parameter 32 w# REGBITS $end
$var parameter 32 x# SIZE $end
$var parameter 32 y# WIDTH $end
$scope begin loop1[1] $end
$var wire 8 z# regOut [7:0] $end
$var parameter 2 {# i $end
$scope module reg32 $end
$var wire 1 / clock $end
$var wire 8 |# dataWrite [7:0] $end
$var wire 1 4 reset $end
$var wire 1 }# we $end
$var wire 8 ~# dataRead [7:0] $end
$var parameter 32 !$ WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 "$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 #$ d $end
$var wire 1 }# en $end
$var reg 1 $$ q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 %$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 &$ d $end
$var wire 1 }# en $end
$var reg 1 '$ q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 ($ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 )$ d $end
$var wire 1 }# en $end
$var reg 1 *$ q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 +$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 ,$ d $end
$var wire 1 }# en $end
$var reg 1 -$ q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 .$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 /$ d $end
$var wire 1 }# en $end
$var reg 1 0$ q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 1$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 2$ d $end
$var wire 1 }# en $end
$var reg 1 3$ q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 4$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 5$ d $end
$var wire 1 }# en $end
$var reg 1 6$ q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 7$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 8$ d $end
$var wire 1 }# en $end
$var reg 1 9$ q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var wire 8 :$ regOut [7:0] $end
$var parameter 3 ;$ i $end
$scope module reg32 $end
$var wire 1 / clock $end
$var wire 8 <$ dataWrite [7:0] $end
$var wire 1 4 reset $end
$var wire 1 =$ we $end
$var wire 8 >$ dataRead [7:0] $end
$var parameter 32 ?$ WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 @$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 A$ d $end
$var wire 1 =$ en $end
$var reg 1 B$ q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 C$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 D$ d $end
$var wire 1 =$ en $end
$var reg 1 E$ q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 F$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 G$ d $end
$var wire 1 =$ en $end
$var reg 1 H$ q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 I$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 J$ d $end
$var wire 1 =$ en $end
$var reg 1 K$ q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 L$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 M$ d $end
$var wire 1 =$ en $end
$var reg 1 N$ q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 O$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 P$ d $end
$var wire 1 =$ en $end
$var reg 1 Q$ q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 R$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 S$ d $end
$var wire 1 =$ en $end
$var reg 1 T$ q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 U$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 V$ d $end
$var wire 1 =$ en $end
$var reg 1 W$ q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var wire 8 X$ regOut [7:0] $end
$var parameter 3 Y$ i $end
$scope module reg32 $end
$var wire 1 / clock $end
$var wire 8 Z$ dataWrite [7:0] $end
$var wire 1 4 reset $end
$var wire 1 [$ we $end
$var wire 8 \$ dataRead [7:0] $end
$var parameter 32 ]$ WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 ^$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 _$ d $end
$var wire 1 [$ en $end
$var reg 1 `$ q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 a$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 b$ d $end
$var wire 1 [$ en $end
$var reg 1 c$ q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 d$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 e$ d $end
$var wire 1 [$ en $end
$var reg 1 f$ q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 g$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 h$ d $end
$var wire 1 [$ en $end
$var reg 1 i$ q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 j$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 k$ d $end
$var wire 1 [$ en $end
$var reg 1 l$ q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 m$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 n$ d $end
$var wire 1 [$ en $end
$var reg 1 o$ q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 p$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 q$ d $end
$var wire 1 [$ en $end
$var reg 1 r$ q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 s$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 t$ d $end
$var wire 1 [$ en $end
$var reg 1 u$ q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var wire 8 v$ regOut [7:0] $end
$var parameter 4 w$ i $end
$scope module reg32 $end
$var wire 1 / clock $end
$var wire 8 x$ dataWrite [7:0] $end
$var wire 1 4 reset $end
$var wire 1 y$ we $end
$var wire 8 z$ dataRead [7:0] $end
$var parameter 32 {$ WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 |$ i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 }$ d $end
$var wire 1 y$ en $end
$var reg 1 ~$ q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 !% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 "% d $end
$var wire 1 y$ en $end
$var reg 1 #% q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 $% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 %% d $end
$var wire 1 y$ en $end
$var reg 1 &% q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 '% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 (% d $end
$var wire 1 y$ en $end
$var reg 1 )% q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 *% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 +% d $end
$var wire 1 y$ en $end
$var reg 1 ,% q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 -% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 .% d $end
$var wire 1 y$ en $end
$var reg 1 /% q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 0% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 1% d $end
$var wire 1 y$ en $end
$var reg 1 2% q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 3% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 4% d $end
$var wire 1 y$ en $end
$var reg 1 5% q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var wire 8 6% regOut [7:0] $end
$var parameter 4 7% i $end
$scope module reg32 $end
$var wire 1 / clock $end
$var wire 8 8% dataWrite [7:0] $end
$var wire 1 4 reset $end
$var wire 1 9% we $end
$var wire 8 :% dataRead [7:0] $end
$var parameter 32 ;% WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 <% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 =% d $end
$var wire 1 9% en $end
$var reg 1 >% q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 ?% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 @% d $end
$var wire 1 9% en $end
$var reg 1 A% q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 B% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 C% d $end
$var wire 1 9% en $end
$var reg 1 D% q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 E% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 F% d $end
$var wire 1 9% en $end
$var reg 1 G% q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 H% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 I% d $end
$var wire 1 9% en $end
$var reg 1 J% q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 K% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 L% d $end
$var wire 1 9% en $end
$var reg 1 M% q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 N% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 O% d $end
$var wire 1 9% en $end
$var reg 1 P% q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 Q% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 R% d $end
$var wire 1 9% en $end
$var reg 1 S% q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var wire 8 T% regOut [7:0] $end
$var parameter 4 U% i $end
$scope module reg32 $end
$var wire 1 / clock $end
$var wire 8 V% dataWrite [7:0] $end
$var wire 1 4 reset $end
$var wire 1 W% we $end
$var wire 8 X% dataRead [7:0] $end
$var parameter 32 Y% WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 Z% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 [% d $end
$var wire 1 W% en $end
$var reg 1 \% q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 ]% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 ^% d $end
$var wire 1 W% en $end
$var reg 1 _% q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 `% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 a% d $end
$var wire 1 W% en $end
$var reg 1 b% q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 c% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 d% d $end
$var wire 1 W% en $end
$var reg 1 e% q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 f% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 g% d $end
$var wire 1 W% en $end
$var reg 1 h% q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 i% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 j% d $end
$var wire 1 W% en $end
$var reg 1 k% q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 l% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 m% d $end
$var wire 1 W% en $end
$var reg 1 n% q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 o% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 p% d $end
$var wire 1 W% en $end
$var reg 1 q% q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var wire 8 r% regOut [7:0] $end
$var parameter 4 s% i $end
$scope module reg32 $end
$var wire 1 / clock $end
$var wire 8 t% dataWrite [7:0] $end
$var wire 1 4 reset $end
$var wire 1 u% we $end
$var wire 8 v% dataRead [7:0] $end
$var parameter 32 w% WIDTH $end
$scope begin loop1[0] $end
$var parameter 2 x% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 y% d $end
$var wire 1 u% en $end
$var reg 1 z% q $end
$upscope $end
$upscope $end
$scope begin loop1[1] $end
$var parameter 2 {% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 |% d $end
$var wire 1 u% en $end
$var reg 1 }% q $end
$upscope $end
$upscope $end
$scope begin loop1[2] $end
$var parameter 3 ~% i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 !& d $end
$var wire 1 u% en $end
$var reg 1 "& q $end
$upscope $end
$upscope $end
$scope begin loop1[3] $end
$var parameter 3 #& i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 $& d $end
$var wire 1 u% en $end
$var reg 1 %& q $end
$upscope $end
$upscope $end
$scope begin loop1[4] $end
$var parameter 4 && i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 '& d $end
$var wire 1 u% en $end
$var reg 1 (& q $end
$upscope $end
$upscope $end
$scope begin loop1[5] $end
$var parameter 4 )& i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 *& d $end
$var wire 1 u% en $end
$var reg 1 +& q $end
$upscope $end
$upscope $end
$scope begin loop1[6] $end
$var parameter 4 ,& i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 -& d $end
$var wire 1 u% en $end
$var reg 1 .& q $end
$upscope $end
$upscope $end
$scope begin loop1[7] $end
$var parameter 4 /& i $end
$scope module d_flip_flop $end
$var wire 1 / clk $end
$var wire 1 4 clr $end
$var wire 1 0& d $end
$var wire 1 u% en $end
$var reg 1 1& q $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module read_decode $end
$var wire 1 2& enable $end
$var wire 3 3& select [2:0] $end
$var wire 8 4& out [7:0] $end
$var parameter 32 5& SELECT_BITS $end
$var parameter 32 6& WIDTH $end
$upscope $end
$scope module write_reg_decode $end
$var wire 1 " enable $end
$var wire 3 7& select [2:0] $end
$var wire 8 8& out [7:0] $end
$var parameter 32 9& SELECT_BITS $end
$var parameter 32 :& WIDTH $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b1000 :&
b11 9&
b1000 6&
b11 5&
b111 /&
b110 ,&
b101 )&
b100 &&
b11 #&
b10 ~%
b1 {%
b0 x%
b1000 w%
b111 s%
b111 o%
b110 l%
b101 i%
b100 f%
b11 c%
b10 `%
b1 ]%
b0 Z%
b1000 Y%
b110 U%
b111 Q%
b110 N%
b101 K%
b100 H%
b11 E%
b10 B%
b1 ?%
b0 <%
b1000 ;%
b101 7%
b111 3%
b110 0%
b101 -%
b100 *%
b11 '%
b10 $%
b1 !%
b0 |$
b1000 {$
b100 w$
b111 s$
b110 p$
b101 m$
b100 j$
b11 g$
b10 d$
b1 a$
b0 ^$
b1000 ]$
b11 Y$
b111 U$
b110 R$
b101 O$
b100 L$
b11 I$
b10 F$
b1 C$
b0 @$
b1000 ?$
b10 ;$
b111 7$
b110 4$
b101 1$
b100 .$
b11 +$
b10 ($
b1 %$
b0 "$
b1000 !$
b1 {#
b1000 y#
b1000 x#
b11 w#
b10111000101110001011110010111000101110001011110110011101110100011010110111011101100001011101100110010101011111011011000110000101100010010111110111010001100101011100110111010001011111011001100110100101101100011001010111001100101111011011010110010101101101010111110110011001101001011011000110010101110011001011110111001101110101011000100110100100101110011011010110010101101101 o#
b1000000 n#
b1111 m#
b1000 l#
b111 h#
b110 e#
b101 b#
b100 _#
b11 \#
b10 Y#
b1 V#
b0 S#
b1000 R#
b1110 K#
b1101 H#
b1100 E#
b1011 B#
b1010 ?#
b1001 <#
b1000 9#
b111 6#
b110 3#
b101 0#
b100 -#
b11 *#
b10 '#
b1 $#
b0 !#
b1111 ~"
b1110 w"
b1101 t"
b1100 q"
b1011 n"
b1010 k"
b1001 h"
b1000 e"
b111 b"
b110 _"
b101 \"
b100 Y"
b11 V"
b10 S"
b1 P"
b0 M"
b1111 L"
b1110 E"
b1101 B"
b1100 ?"
b1011 <"
b1010 9"
b1001 6"
b1000 3"
b111 0"
b110 -"
b101 *"
b100 '"
b11 $"
b10 !"
b1 |
b0 y
b1111 x
b111 q
b110 n
b101 k
b100 h
b11 e
b10 b
b1 _
b0 \
b1000 [
b1110110011001010111001001101001011001100110100101100011011000010111010001101001011011110110111001011111011001100110100101101100011001010111001100101111 .
b1101111011101010111010001110000011101010111010001011111011001100110100101101100011001010111001100101111 -
b1101101011001010110110101011111011001100110100101101100011001010111001100101111 ,
b1110011011101010110001001101001 +
b10111000101110001011110010111000101110001011110110011101110100011010110111011101100001011101100110010101011111011011000110000101100010010111110111010001100101011100110111010001011111011001100110100101101100011001010111001100101111 *
b11111111 )
$end
#0
$dumpvars
b1 8&
b0 7&
b1 4&
b0 3&
12&
01&
00&
0.&
0-&
0+&
0*&
0(&
0'&
0%&
0$&
0"&
0!&
0}%
0|%
0z%
0y%
b0 v%
0u%
b0 t%
b0 r%
0q%
0p%
0n%
0m%
0k%
0j%
0h%
0g%
0e%
0d%
0b%
0a%
0_%
0^%
0\%
0[%
b0 X%
0W%
b0 V%
b0 T%
0S%
0R%
0P%
0O%
0M%
0L%
0J%
0I%
0G%
0F%
0D%
0C%
0A%
0@%
0>%
0=%
b0 :%
09%
b0 8%
b0 6%
05%
04%
02%
01%
0/%
0.%
0,%
0+%
0)%
0(%
0&%
0%%
0#%
0"%
0~$
0}$
b0 z$
0y$
b0 x$
b0 v$
0u$
0t$
0r$
0q$
0o$
0n$
0l$
0k$
0i$
0h$
0f$
0e$
0c$
0b$
0`$
0_$
b0 \$
0[$
b0 Z$
b0 X$
0W$
0V$
0T$
0S$
0Q$
0P$
0N$
0M$
0K$
0J$
0H$
0G$
0E$
0D$
0B$
0A$
b0 >$
0=$
b0 <$
b0 :$
09$
08$
06$
05$
03$
02$
00$
0/$
0-$
0,$
0*$
0)$
0'$
0&$
0$$
0#$
b0 ~#
0}#
b0 |#
b0 z#
b1 v#
b1 u#
b0 t#
b0 s#
b0 r#
b0 q#
b0 p#
b0 k#
0j#
0i#
0g#
0f#
0d#
0c#
0a#
0`#
0^#
0]#
0[#
0Z#
0X#
0W#
0U#
0T#
b0 Q#
1P#
b0 O#
1N#
0M#
0L#
0J#
0I#
0G#
0F#
0D#
0C#
0A#
0@#
0>#
0=#
0;#
0:#
08#
07#
05#
04#
02#
01#
0/#
0.#
0,#
0+#
0)#
0(#
0&#
0%#
0##
0"#
b0 }"
1|"
b0 {"
1z"
0y"
0x"
0v"
0u"
0s"
0r"
0p"
0o"
0m"
0l"
0j"
0i"
0g"
0f"
0d"
0c"
0a"
0`"
0^"
0]"
0["
0Z"
0X"
0W"
0U"
0T"
0R"
0Q"
0O"
0N"
b0 K"
b0 J"
1I"
1H"
0G"
0F"
0D"
0C"
0A"
0@"
0>"
0="
0;"
0:"
08"
07"
05"
04"
02"
01"
0/"
0."
0,"
0+"
0)"
0("
0&"
0%"
0#"
0""
0~
0}
0{
0z
b0 w
b0 v
1u
1t
0s
0r
0p
0o
0m
0l
0j
0i
0g
0f
0d
0c
0a
0`
0^
0]
b0 Z
1Y
b0 X
1W
b0 V
b0 U
b11111111 T
1S
b0 R
b0 Q
b0 P
0O
b0 N
b0 M
b0 L
b0 K
b0 J
0I
b0 H
b0 G
b0 F
b0 E
b0 D
b0 C
b0 B
b0 A
b0 @
b0 ?
b0 >
b0 =
b0 <
b0 ;
b1 :
b10000000000000000000000000000011 9
b0 8
b0 7
16
05
14
b11110 3
b0 2
bx 1
bx 0
0/
b0 (
b0 '
b0 &
b0 %
b0 $
b0 #
1"
b0 !
$end
#1000
04
#10000
1x"
b100000000000000 (
b100000000000000 A
b100000000000000 J"
b100000000000000 p#
0H"
0W
0t
0N#
0z"
1/
#20000
1F"
b100000000000000 C
b100000000000000 v
b100000000000000 K"
1y"
b1 2
b1 <
b1 k#
1H"
1W
1t
1N#
1z"
b1 7
0/
#30000
1o"
1f"
1N"
b100100100000001 (
b100100100000001 A
b100100100000001 J"
b100100100000001 p#
0H"
0W
0t
0N#
0z"
1/
#40000
b10 v#
b10 4&
b1 $
b1 q#
b1 3&
1z
14"
b1 %
b1 G
1="
1L#
1I
1O"
1g"
b100100100000001 C
b100100100000001 v
b100100100000001 K"
1p"
b100000000000000 D
b100000000000000 w
b100000000000000 {"
1G"
b10 2
b10 <
b10 k#
1H"
1W
1t
1N#
1z"
b10 7
0/
#50000
1r"
0o"
1i"
0f"
1Q"
0N"
b101001000000010 (
b101001000000010 A
b101001000000010 J"
b101001000000010 p#
0H"
0W
0t
0N#
0z"
1/
#60000
b0 !
b0 =
b0 X
b0 s#
1T#
1W#
1Z#
1]#
1`#
1c#
1f#
1i#
b11111111 H
b11111111 L
b11111111 O#
b100 v#
b100 4&
b10 $
b10 q#
b10 3&
b11111111 K
b11111111 U
b11111110 T
1@"
0="
17"
04"
b10 %
b10 G
1}
0z
1C#
1:#
1"#
b1 N
b1 Q
b1 B
b1 J
b1 P
1s"
0p"
1j"
0g"
1R"
b101001000000010 C
b101001000000010 v
b101001000000010 K"
0O"
1>"
15"
b100100100000001 D
b100100100000001 w
b100100100000001 {"
1{
b100000000000000 @
b100000000000000 }"
1M#
b11 2
b11 <
b11 k#
1H"
1W
1t
1N#
1z"
b11 7
0/
#70000
1o"
1f"
1N"
b101101100000011 (
b101101100000011 A
b101101100000011 J"
b101101100000011 p#
0H"
0W
0t
0N#
0z"
1/
#80000
b0 !
b0 =
b0 X
b0 s#
0T#
b11111110 H
b11111110 L
b11111110 O#
b1000 v#
b1000 4&
b11 $
b11 q#
b11 3&
b11111110 K
b11111110 U
b11111101 T
1}#
1z
14"
b11 %
b11 G
1="
0"#
1%#
b10 N
b10 Q
b10 B
b10 J
b10 P
0:#
1=#
0C#
1F#
1#$
1A$
1_$
1}$
1=%
1[%
1y%
1&$
1D$
1b$
1"%
1@%
1^%
1|%
1)$
1G$
1e$
1%%
1C%
1a%
1!&
1,$
1J$
1h$
1(%
1F%
1d%
1$&
1/$
1M$
1k$
1+%
1I%
1g%
1'&
12$
1P$
1n$
1.%
1L%
1j%
1*&
15$
1S$
1q$
11%
1O%
1m%
1-&
18$
1V$
1t$
14%
1R%
1p%
10&
b10 u#
b10 8&
b1 &
b1 F
b1 r#
b1 7&
1O"
1g"
b101101100000011 C
b101101100000011 v
b101101100000011 K"
1p"
0{
1~
05"
18"
0>"
b101001000000010 D
b101001000000010 w
b101001000000010 {"
1A"
1U#
1X#
1[#
1^#
1a#
1d#
1g#
b11111111 '
b11111111 >
b11111111 t#
b11111111 |#
b11111111 <$
b11111111 Z$
b11111111 x$
b11111111 8%
b11111111 V%
b11111111 t%
b11111111 ?
b11111111 Q#
1j#
1##
1;#
b100100100000001 @
b100100100000001 }"
1D#
b100 2
b100 <
b100 k#
1H"
1W
1t
1N#
1z"
b100 7
0/
#90000
1u"
0r"
0o"
1l"
0i"
0f"
1T"
0Q"
0N"
b110010000000100 (
b110010000000100 A
b110010000000100 J"
b110010000000100 p#
19$
16$
13$
10$
1-$
1*$
1'$
b11111111 z#
b11111111 ~#
1$$
0H"
0W
0t
0N#
0z"
1/
#100000
b0 !
b0 =
b0 X
b0 s#
1T#
0W#
b11111101 H
b11111101 L
b11111101 O#
b10000 v#
b10000 4&
b100 $
b100 q#
b100 3&
b11111101 K
b11111101 U
b11111100 T
1=$
0}#
1C"
0@"
0="
1:"
07"
04"
b100 %
b100 G
1""
0}
0z
1C#
1:#
1"#
b11 N
b11 Q
b11 B
b11 J
b11 P
0#$
0A$
0_$
0}$
0=%
0[%
0y%
b100 u#
b100 8&
b10 &
b10 F
b10 r#
b10 7&
1v"
0s"
0p"
1m"
0j"
0g"
1U"
0R"
b110010000000100 C
b110010000000100 v
b110010000000100 K"
0O"
1>"
15"
b101101100000011 D
b101101100000011 w
b101101100000011 {"
1{
b11111110 '
b11111110 >
b11111110 t#
b11111110 |#
b11111110 <$
b11111110 Z$
b11111110 x$
b11111110 8%
b11111110 V%
b11111110 t%
b11111110 ?
b11111110 Q#
0U#
1G#
0D#
1>#
0;#
1&#
b101001000000010 @
b101001000000010 }"
0##
b101 2
b101 <
b101 k#
1H"
1W
1t
1N#
1z"
b101 7
0/
#110000
1o"
1f"
1N"
b110110100000101 (
b110110100000101 A
b110110100000101 J"
b110110100000101 p#
1E$
1H$
1K$
1N$
1Q$
1T$
b11111110 :$
b11111110 >$
1W$
0H"
0W
0t
0N#
0z"
1/
#120000
b0 !
b0 =
b0 X
b0 s#
0T#
b11111100 H
b11111100 L
b11111100 O#
b100000 v#
b100000 4&
b101 $
b101 q#
b101 3&
b11111100 K
b11111100 U
b11111011 T
1[$
0=$
1z
14"
b101 %
b101 G
1="
0"#
0%#
1(#
b100 N
b100 Q
b100 B
b100 J
b100 P
0:#
0=#
1@#
0C#
0F#
1I#
1#$
1A$
1_$
1}$
1=%
1[%
1y%
0&$
0D$
0b$
0"%
0@%
0^%
0|%
b1000 u#
b1000 8&
b11 &
b11 F
b11 r#
b11 7&
1O"
1g"
b110110100000101 C
b110110100000101 v
b110110100000101 K"
1p"
0{
0~
1#"
05"
08"
1;"
0>"
0A"
b110010000000100 D
b110010000000100 w
b110010000000100 {"
1D"
1U#
b11111101 '
b11111101 >
b11111101 t#
b11111101 |#
b11111101 <$
b11111101 Z$
b11111101 x$
b11111101 8%
b11111101 V%
b11111101 t%
b11111101 ?
b11111101 Q#
0X#
1##
1;#
b101101100000011 @
b101101100000011 }"
1D#
b110 2
b110 <
b110 k#
1H"
1W
1t
1N#
1z"
b110 7
0/
#130000
1r"
0o"
1i"
0f"
1Q"
0N"
b111011000000110 (
b111011000000110 A
b111011000000110 J"
b111011000000110 p#
1u$
1r$
1o$
1l$
1i$
1f$
b11111101 X$
b11111101 \$
1`$
0H"
0W
0t
0N#
0z"
1/
#140000
b0 !
b0 =
b0 X
b0 s#
1T#
1W#
0Z#
b11111011 H
b11111011 L
b11111011 O#
b1000000 v#
b1000000 4&
b110 $
b110 q#
b110 3&
b11111011 K
b11111011 U
b11111010 T
1y$
0[$
1@"
0="
17"
04"
b110 %
b110 G
1}
0z
1C#
1:#
1"#
b101 N
b101 Q
b101 B
b101 J
b101 P
0#$
0A$
0_$
0}$
0=%
0[%
0y%
b10000 u#
b10000 8&
b100 &
b100 F
b100 r#
b100 7&
1s"
0p"
1j"
0g"
1R"
b111011000000110 C
b111011000000110 v
b111011000000110 K"
0O"
1>"
15"
b110110100000101 D
b110110100000101 w
b110110100000101 {"
1{
b11111100 '
b11111100 >
b11111100 t#
b11111100 |#
b11111100 <$
b11111100 Z$
b11111100 x$
b11111100 8%
b11111100 V%
b11111100 t%
b11111100 ?
b11111100 Q#
0U#
1J#
0G#
0D#
1A#
0>#
0;#
1)#
0&#
b110010000000100 @
b110010000000100 }"
0##
b111 2
b111 <
b111 k#
1H"
1W
1t
1N#
1z"
b111 7
0/
#150000
1o"
1f"
1N"
b111111100000111 (
b111111100000111 A
b111111100000111 J"
b111111100000111 p#
1&%
1)%
1,%
1/%
12%
b11111100 v$
b11111100 z$
15%
0H"
0W
0t
0N#
0z"
1/
#160000
b0 !
b0 =
b0 X
b0 s#
0T#
b11111010 H
b11111010 L
b11111010 O#
b10000000 v#
b10000000 4&
b111 $
b111 q#
b111 3&
b11111010 K
b11111010 U
b11111001 T
19%
0y$
1z
14"
b111 %
b111 G
1="
0"#
1%#
b110 N
b110 Q
b110 B
b110 J
b110 P
0:#
1=#
0C#
1F#
1#$
1A$
1_$
1}$
1=%
1[%
1y%
1&$
1D$
1b$
1"%
1@%
1^%
1|%
0)$
0G$
0e$
0%%
0C%
0a%
0!&
b100000 u#
b100000 8&
b101 &
b101 F
b101 r#
b101 7&
1O"
1g"
b111111100000111 C
b111111100000111 v
b111111100000111 K"
1p"
0{
1~
05"
18"
0>"
b111011000000110 D
b111011000000110 w
b111011000000110 {"
1A"
1U#
1X#
b11111011 '
b11111011 >
b11111011 t#
b11111011 |#
b11111011 <$
b11111011 Z$
b11111011 x$
b11111011 8%
b11111011 V%
b11111011 t%
b11111011 ?
b11111011 Q#
0[#
1##
1;#
b110110100000101 @
b110110100000101 }"
1D#
b1000 2
b1000 <
b1000 k#
1H"
1W
1t
1N#
1z"
b1000 7
0/
#170000
0x"
0u"
0r"
0o"
0l"
0i"
0f"
0T"
0Q"
0N"
b0 (
b0 A
b0 J"
b0 p#
1S%
1P%
1M%
1J%
1G%
1A%
b11111011 6%
b11111011 :%
1>%
0H"
0W
0t
0N#
0z"
1/
#180000
b0 !
b0 =
b0 X
b0 s#
1T#
0W#
b11111001 H
b11111001 L
b11111001 O#
b1 v#
b1 4&
b0 $
b0 q#
b0 3&
b11111001 K
b11111001 U
b11111000 T
1W%
09%
0F"
0C"
0@"
0="
0:"
07"
04"
b0 %
b0 G
0""
0}
0z
1C#
1:#
1"#
b111 N
b111 Q
b111 B
b111 J
b111 P
0#$
0A$
0_$
0}$
0=%
0[%
0y%
b1000000 u#
b1000000 8&
b110 &
b110 F
b110 r#
b110 7&
0y"
0v"
0s"
0p"
0m"
0j"
0g"
0U"
0R"
b0 C
b0 v
b0 K"
0O"
1>"
15"
b111111100000111 D
b111111100000111 w
b111111100000111 {"
1{
b11111010 '
b11111010 >
b11111010 t#
b11111010 |#
b11111010 <$
b11111010 Z$
b11111010 x$
b11111010 8%
b11111010 V%
b11111010 t%
b11111010 ?
b11111010 Q#
0U#
1G#
0D#
1>#
0;#
1&#
b111011000000110 @
b111011000000110 }"
0##
b1001 2
b1001 <
b1001 k#
1H"
1W
1t
1N#
1z"
b1001 7
0/
#190000
1_%
1e%
1h%
1k%
1n%
b11111010 T%
b11111010 X%
1q%
0H"
0W
0t
0N#
0z"
1/
#200000
0T#
0]#
0`#
0c#
0f#
0i#
b0 K
b0 U
b11111111 T
b0 H
b0 L
b0 O#
1u%
0W%
0"#
0%#
0(#
b0 N
b0 Q
b0 B
b0 J
b0 P
0:#
0=#
0@#
0C#
0F#
0I#
0L#
0I
1#$
1A$
1_$
1}$
1=%
1[%
1y%
0&$
0D$
0b$
0"%
0@%
0^%
0|%
b10000000 u#
b10000000 8&
b111 &
b111 F
b111 r#
b111 7&
0{
0~
0#"
05"
08"
0;"
0>"
0A"
0D"
b0 D
b0 w
b0 {"
0G"
1U#
b11111001 '
b11111001 >
b11111001 t#
b11111001 |#
b11111001 <$
b11111001 Z$
b11111001 x$
b11111001 8%
b11111001 V%
b11111001 t%
b11111001 ?
b11111001 Q#
0X#
1##
1;#
b111111100000111 @
b111111100000111 }"
1D#
b1010 2
b1010 <
b1010 k#
1H"
1W
1t
1N#
1z"
b1010 7
0/
#210000
11&
1.&
1+&
1(&
1%&
b11111001 r%
b11111001 v%
1z%
0H"
0W
0t
0N#
0z"
1/
#220000
0u%
08$
0V$
0t$
04%
0R%
0p%
00&
05$
0S$
0q$
01%
0O%
0m%
0-&
02$
0P$
0n$
0.%
0L%
0j%
0*&
0/$
0M$
0k$
0+%
0I%
0g%
0'&
0,$
0J$
0h$
0(%
0F%
0d%
0$&
0#$
0A$
0_$
0}$
0=%
0[%
0y%
b1 u#
b1 8&
b0 &
b0 F
b0 r#
b0 7&
0j#
0g#
0d#
0a#
0^#
b0 '
b0 >
b0 t#
b0 |#
b0 <$
b0 Z$
b0 x$
b0 8%
b0 V%
b0 t%
b0 ?
b0 Q#
0U#
0M#
0J#
0G#
0D#
0A#
0>#
0;#
0)#
0&#
b0 @
b0 }"
0##
b1011 2
b1011 <
b1011 k#
1H"
1W
1t
1N#
1z"
b1011 7
0/
#230000
0H"
0W
0t
0N#
0z"
1/
#240000
b1100 2
b1100 <
b1100 k#
1H"
1W
1t
1N#
1z"
b1100 7
0/
#250000
0H"
0W
0t
0N#
0z"
1/
#260000
b1101 2
b1101 <
b1101 k#
1H"
1W
1t
1N#
1z"
b1101 7
0/
#270000
0H"
0W
0t
0N#
0z"
1/
#280000
b1110 2
b1110 <
b1110 k#
1H"
1W
1t
1N#
1z"
b1110 7
0/
#290000
0H"
0W
0t
0N#
0z"
1/
#300000
b1111 2
b1111 <
b1111 k#
1H"
1W
1t
1N#
1z"
b1111 7
0/
#310000
0H"
0W
0t
0N#
0z"
1/
#320000
b10000 2
b10000 <
b10000 k#
1H"
1W
1t
1N#
1z"
b10000 7
0/
#330000
0H"
0W
0t
0N#
0z"
1/
#340000
b10001 2
b10001 <
b10001 k#
1H"
1W
1t
1N#
1z"
b10001 7
0/
#350000
0H"
0W
0t
0N#
0z"
1/
#360000
b10010 2
b10010 <
b10010 k#
1H"
1W
1t
1N#
1z"
b10010 7
0/
#370000
0H"
0W
0t
0N#
0z"
1/
#380000
b10011 2
b10011 <
b10011 k#
1H"
1W
1t
1N#
1z"
b10011 7
0/
#390000
0H"
0W
0t
0N#
0z"
1/
#400000
b10100 2
b10100 <
b10100 k#
1H"
1W
1t
1N#
1z"
b10100 7
0/
#410000
0H"
0W
0t
0N#
0z"
1/
#420000
b10101 2
b10101 <
b10101 k#
1H"
1W
1t
1N#
1z"
b10101 7
0/
#430000
0H"
0W
0t
0N#
0z"
1/
#440000
b10110 2
b10110 <
b10110 k#
1H"
1W
1t
1N#
1z"
b10110 7
0/
#450000
0H"
0W
0t
0N#
0z"
1/
#460000
b10111 2
b10111 <
b10111 k#
1H"
1W
1t
1N#
1z"
b10111 7
0/
#470000
0H"
0W
0t
0N#
0z"
1/
#480000
b11000 2
b11000 <
b11000 k#
1H"
1W
1t
1N#
1z"
b11000 7
0/
#490000
0H"
0W
0t
0N#
0z"
1/
#500000
b11001 2
b11001 <
b11001 k#
1H"
1W
1t
1N#
1z"
b11001 7
0/
#510000
0H"
0W
0t
0N#
0z"
1/
#520000
b11010 2
b11010 <
b11010 k#
1H"
1W
1t
1N#
1z"
b11010 7
0/
#530000
0H"
0W
0t
0N#
0z"
1/
#540000
b11011 2
b11011 <
b11011 k#
1H"
1W
1t
1N#
1z"
b11011 7
0/
#550000
0H"
0W
0t
0N#
0z"
1/
#560000
b11100 2
b11100 <
b11100 k#
1H"
1W
1t
1N#
1z"
b11100 7
0/
#570000
0H"
0W
0t
0N#
0z"
1/
#580000
b11101 2
b11101 <
b11101 k#
1H"
1W
1t
1N#
1z"
b11101 7
0/
#590000
0H"
0W
0t
0N#
0z"
1/
#600000
b11110 2
b11110 <
b11110 k#
1H"
1W
1t
1N#
1z"
b10 :
b0 0
b1110010001100000011110100110000 1
15
b11110 7
0/
#601000
1]
1`
1c
1f
1i
1l
1o
1r
b11111111 !
b11111111 =
b11111111 X
b11111111 s#
b10 v#
b10 4&
b1 $
b1 q#
b1 3&
b1 #
b11111111111111111111111111111111 0
b1 ;
b10 :
b111001000110001001111010010110100110001 1
#602000
0]
b11111110 !
b11111110 =
b11111110 X
b11111110 s#
b100 v#
b100 4&
b10 $
b10 q#
b10 3&
b10 #
b11111111111111111111111111111110 0
b10 ;
b10 :
b111001000110010001111010010110100110010 1
#603000
1]
0`
b11111101 !
b11111101 =
b11111101 X
b11111101 s#
b1000 v#
b1000 4&
b11 $
b11 q#
b11 3&
b11 #
b11111111111111111111111111111101 0
b11 ;
b10 :
b111001000110011001111010010110100110011 1
#604000
0]
b11111100 !
b11111100 =
b11111100 X
b11111100 s#
b10000 v#
b10000 4&
b100 $
b100 q#
b100 3&
b100 #
b11111111111111111111111111111100 0
b100 ;
b10 :
b111001000110100001111010010110100110100 1
#605000
1]
1`
0c
b11111011 !
b11111011 =
b11111011 X
b11111011 s#
b100000 v#
b100000 4&
b101 $
b101 q#
b101 3&
b101 #
b11111111111111111111111111111011 0
b101 ;
b10 :
b111001000110101001111010010110100110101 1
#606000
0]
b11111010 !
b11111010 =
b11111010 X
b11111010 s#
b1000000 v#
b1000000 4&
b110 $
b110 q#
b110 3&
b110 #
b11111111111111111111111111111010 0
b110 ;
b10 :
b111001000110110001111010010110100110110 1
#607000
1]
0`
b11111001 !
b11111001 =
b11111001 X
b11111001 s#
b10000000 v#
b10000000 4&
b111 $
b111 q#
b111 3&
b111 #
b11111111111111111111111111111001 0
b111 ;
b10 :
b111001000110111001111010010110100110111 1
#608000
b10 :
#610000
0H"
0W
0t
0N#
0z"
1/
#620000
1T#
1]#
1`#
1c#
1f#
1i#
b11111001 H
b11111001 L
b11111001 O#
1s
1p
1m
1j
1g
b11111001 K
b11111001 U
b11111001 N
b11111001 Q
b11111001 E
b11111001 M
b11111001 R
b11111001 V
b11111001 Z
1^
1H"
1W
1t
1N#
1z"
0/
#630000
0H"
0W
0t
0N#
0z"
1/
#640000
1#$
1A$
1_$
1}$
1=%
1[%
1y%
1,$
1J$
1h$
1(%
1F%
1d%
1$&
1/$
1M$
1k$
1+%
1I%
1g%
1'&
12$
1P$
1n$
1.%
1L%
1j%
1*&
15$
1S$
1q$
11%
1O%
1m%
1-&
18$
1V$
1t$
14%
1R%
1p%
10&
1U#
1^#
1a#
1d#
1g#
b11111001 '
b11111001 >
b11111001 t#
b11111001 |#
b11111001 <$
b11111001 Z$
b11111001 x$
b11111001 8%
b11111001 V%
b11111001 t%
b11111001 ?
b11111001 Q#
1j#
1H"
1W
1t
1N#
1z"
0/
#650000
0H"
0W
0t
0N#
0z"
1/
#660000
1H"
1W
1t
1N#
1z"
0/
#670000
0H"
0W
0t
0N#
0z"
1/
#680000
1H"
1W
1t
1N#
1z"
0/
#690000
0H"
0W
0t
0N#
0z"
1/
#700000
1H"
1W
1t
1N#
1z"
0/
#708000
